<%- include top.ejs %>
<div class="row">
  <div class="col-sm-3">
    <%- include menu.ejs %>
  </div>
  <div class="col-sm-9 docs">

    <h2>
<a name="list-api" class="anchor" href="#list-api"><span class="octicon octicon-link"></span></a>List API</h2>

<p>These methods are available for the List-object.</p>

<h3>
<a name="properties" class="anchor" href="#properties"><span class="octicon octicon-link"></span></a>Properties</h3>

<ul>
    <li>
        <p><strong>listContainer</strong> <em class="docs-parameter-description">Element</em><br>
        The element node that contains the entire list area.</p>
    </li>
    <li>
        <p><strong>list</strong> <em class="docs-parameter-description">Element</em><br>
        The element containing all items.</p>
    </li>
    <li>
        <p><strong>items</strong> <em class="docs-parameter-description">Array</em><br>
        An Array of all Item-objects in the list.</p>
    </li>
    <li>
        <p><strong>visibleItems</strong> <em class="docs-parameter-description">Array</em><br>
        The currently visible items in the list</p>
    </li>
    <li>
        <p><strong>matchingItems</strong> <em class="docs-parameter-description">Array</em><br>
        The items matching the currently active filter and search.</p>
    </li>
    <li>
        <p><strong>searched</strong> <em class="docs-parameter-description">Boolean</em><br>
        Returns true if the list is searched.</p>
    </li>
    <li>
        <p><strong>filtered</strong> <em class="docs-parameter-description">Boolean</em><br>
        Returns true if there is an active filter.</p>
    </li>
    <li>
        <p><strong>list</strong> <em class="docs-parameter-description">Element</em><br>
        The element containing all items.</p>
    </li>
    <li>
        <p><strong>templateEngines</strong> <em class="docs-parameter-description">Object</em><br>
        Contains all template engines available.</p>
    </li>
    <li>
        <p><strong>plugins</strong> <em class="docs-parameter-description">Object</em><br>
        The currently avaliable plugins.</p>
    </li>
</ul>

<h3><a name="methods" class="anchor" href="#methods"><span class="octicon octicon-link"></span></a>Methods</h3>

<ul>
<li>
<p><strong>add(values, callback)</strong><br>
Adds one or more items to the list.</p>

<pre><code class="javascript">listObj.add({ name: "Jonny", city: "Stockholm" });

listObj.add([
    { name: "Gustaf", city: "Sundsvall" }
    , { name: "Jonas", city: "Berlin" }
]);</code></pre>

<p>If <code>callback</code> is set then items are added to the list in a asynchronous way, and the
callback is called when all items are added. This is especially useful
when adding very many items (200+ or something), or if you just like the
asynchronous coding style.</p>

<pre><code class="javascript">listObj.add(arrayWithManyManyItems, function(items) {
    console.log('All ' + items.length + ' were added!');
});</code></pre>
</li>
<li>
<p><strong>remove(valueName, value)</strong><br>
Removes items from the list where the value named <code>valueName</code> has value <code>value</code>.
Returns the number of items that where removed.</p>

<pre><code class="javascript">itemsInList = [
    { id: 1, name: "Jonny" }
    , { id: 2, name "Gustaf" }
];
listObj.remove("id", 1); -> return 1</code></pre>
</li>
<li>
<p><strong>get(valueName, value)</strong><br>
Returns values from the list where the value named <code>valueName</code> has value <code>value</code>.</p>

<pre><code class="javascript">itemsInList = [
    { id: 1, name: "Jonny" }
    , { id: 2, name "Gustaf" }
];
listObj.get("id", 2); -> return { id: 2, name "Gustaf" }</code></pre>
</li>
<li>
<p><strong>sort(valueName, options)</strong><br>
Sorts the list based on values the in the column named <code>valueName</code>. The options
parameter can contain two properties <code>options.sortFunction</code> and <code>options.asc</code>.
<code>options.sortFunction</code> is used if you want to make your own sort function.
The default sort function is found here <a href="http://my.opera.com/GreyWyvern/blog/show.dml/1671288">http://my.opera.com/GreyWyvern/blog/show.dml/1671288</a>
<code>options.asc = true</code> means that you want to sort the list in ascending order. Set
<code>false</code> for descending.</p>

<pre><code class="javascript">listObj.sort('name', { asc: true }); -> Sorts the list in abc-order based on names
listObj.sort('name', { asc: false }); -> Sorts the list in zxy-order based on names</code></pre>

</li>
<li>
<p><strong>search(searchString, columns)</strong><br>
Searches the list</p>

<pre><code class="javascript">itemsInList = [
    { id: 1, name: "Jonny" }
    , { id: 2, name "Gustaf" }
    , { id: 3, name "Jonas" }
];

listObj.search('Jonny'); -> Only item with name Jonny is shown (also returns this item)

listObj.search(); -> Show all items in list</code></pre>

</li>
<li><p><strong>clear()</strong><br>
Removes all items from the list</p></li>
<li>
<p><strong>filter(filterFunction)</strong></p>

<pre><code class="javascript">itemsInList = [
    { id: 1, name: "Jonny" }
    , { id: 2, name "Gustaf" }
    , { id: 3, name "Jonas" }
];

listObj.filter(function(item) {
   if (item.values().id > 1) {
       return true;
   } else {
       return false;
   }
}); -> Only items with id > 1 are shown in list

listObj.filter(); -> Remove all filters</code></pre>

</li>
<li><p><strong>size()</strong><br>
Returns the size of the list.</p></li>
<li>
<p><strong>show(i, page)</strong><br>
Shows <code>page</code> number of items from <code>i</code>. Use for paging etc.</p>

<pre><code class="javascript">itemsInList = [
    { id: 1, name: "Jonny" }
    , { id: 2, name "Gustaf" }
    , { id: 3, name "Jonas" }
    , { id: 4, name "Egon" }
    , { id: 5, name "Frank" }
    , { id: 6, name "Ester" }
];

listObj.show(4, 3); -> Display item 4,5,6 </code></pre>

</li>
<li><p><strong>update()</strong><br>
Updates the current state of the list. Meaning that if you for instance 
hides some items with the <code>itemObj.hide()</code> method then you have to call <code>listObj.update()</code> 
if you want the paging to update.</p></li>
<li><p><strong>on(event, callback)</strong><br>
Execute <code>callback</code> when list have been updated (triggered by <code>update()</code>, which is used by a lot of methods). Use <code>updated</code> as the event.</p></li>
</ul>


</div></div>
