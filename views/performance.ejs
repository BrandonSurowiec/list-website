<div class="performance example-page">

    <h1>Performance, <strong>wroooooom!</strong></h1>

    <div id="main"><br />

        <div id="performance-share" style="display:none;">
            <h2>Like what you see? Share it!</h2>
    	    <!-- AddThis Button BEGIN -->
    	    <div class="addthis_toolbox addthis_default_style " addthis:url="http://listjs.com/examples/performance-test.html">
    	    <a class="addthis_button_facebook_like" fb:like:layout="button_count"></a>
    	    <span class="at300b"><a href="https://twitter.com/share" class="twitter-share-button" data-count="horizontal" data-related="javve:The Photoshopping JavaScript Ninja that created List.js">Tweet</a></span>
    	    <a class="addthis_button_google_plusone" g:plusone:size="medium"></a>
    	    <a class="addthis_counter addthis_pill_style"></a>

    	    </div>
    	    <!-- AddThis Button END -->
    	    <script type="text/javascript" src="//platform.twitter.com/widgets.js"></script>
    	</div>


        <div id="time-table" style="display:none;">
            <table>
                <thead>
                    <tr>
                        <th>Operation (list size is <span id="list-size-val"></span>)</th>
                        <th>Time</th>
                    </tr>
                </thead>
                <tbody class="list">
                </tbody>
            </table>
            <table style="display:none;">
                <tr id="time-table-item">
                    <td class="operation"></td>
                    <td><strong class="time"></strong> ms</td>
                </tr>
            </table>
        </div>

        <div id="size">
            <h2>
                How many <strong>items</strong> and with how many <strong>value names</strong>
                do you want to index?
            </h2>
            <input type="text" value="1000" style="margin-left:60px;" id="list-size" />
            <input type="text" value="3" style="width:40px;" id="column-count" />
            <button class="btn" id="make-list">Make and index list</button>
        </div>

        <div class="c1">
            <div id="performance-list" style="display:none;">
                <input type="text" id="search-field" placeholder="Press enter to search" />
                <input type="text" id="search-fuzzy-field" placeholder="Press enter to search" />
                <span class="btn" id="sort-col-1">Sort column 1</span>
                <div class="scroll-container c1">
                    <table>
                        <tbody class="list"></table>
                    </table>
                </div>

                <input type="text" value="100" id="add-items-count" />
                <button class="btn" id="add-items">Add more items</button>

                <p style="clear:both; padding-top:30px;">Note: The default setting <code>{ maxVisibleItemsCount: 200 }</code> is set</p>
            </div>

        </div>

    </div>

</div>


<!-- Start of List.js stuff -->
<script src="/js/plugins/fuzzy/list.fuzzySearch.js"></script>

<script type="text/javascript">
    var theList,
        sorted = false,
        searched = false,
        columnCount = 0,
        timeTable = new List('time-table', { valueNames: ['operation', 'time' ], item: 'time-table-item'});

    function randomString(length) {
        var chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmnopqrstuvwxyz'.split('');

        if (! length) {
            length = Math.floor(Math.random() * chars.length);
        }

        var str = '';
        for (var i = 0; i < length; i++) {
            str += chars[Math.floor(Math.random() * chars.length)];
        }
        return str;
    }

    $('#make-list').click(createList);
    $('#search-field').keypress(searchList);
    $('#search-fuzzy-field').keypress(searchFuzzyList);
    $('#sort-col-1').click(function () { sortColumn('column0'); });
    /*
    $('#sort-col-2').click(function () { sortColumn('column2'); });
    $('#sort-col-3').click(function () { sortColumn('column3'); });
    */

    $('#add-items').click(addItems);

    /* CREATION */
    function createList() {
        var itemCount = +$('#list-size').val(),
            htmlStuff = '';

        columnCount = +$('#column-count').val();

        for (var i = 0; i < itemCount; i++) {
            htmlStuff += '<tr>';
            for (var j = 0; j < columnCount; j++) {
                htmlStuff += '<td class="column'+j+'">'+randomString(13)+'</td>';
            }
            htmlStuff += '</tr>';
        }
        $('#performance-list .list').html(htmlStuff);

        slideing();
    }
    function slideing() {
        $('#size').slideUp(function() {
            $('#performance-list').slideDown(indexList());
        });
    }

    function indexList() {
        var itemCount = +$('#list-size').val(),
            dateObj1,
            dateObj2,
            valueNames = [];

        for (var j = 0; j < columnCount; j++) {
            valueNames.push('column'+j);
        }

        /* CREATE LIST PERFORMANCE */
        dateObj1 = new Date();
        theList = new List('performance-list', { valueNames: valueNames });
        dateObj2 = new Date();

        $('#list-size-val').text(theList.size());

        $('#time-table').slideDown(function(){
            timeTable.add({
                operation: "Index list with "+itemCount+" items and "+columnCount+" value names",
                time: dateObj2.getTime() - dateObj1.getTime()
            });
        });
    }


    /* SEARCH */
    function searchList(event) {
        var dateObj1,
            dateObj2,
            searchString = $(this).val(),
            key = event.which;

        /* Only search when press 'enter', otherwise the time table
        is flooded */
        if (key == 13) {
            /* SEARCH LIST PERFORMANCE */
            dateObj1 = new Date();
            theList.search(searchString);
            dateObj2 = new Date();

            if (searchString != "") {
                timeTable.add({
                    operation: "Search for "+searchString,
                    time: dateObj2.getTime() - dateObj1.getTime()
                });
            } else {
                timeTable.add({
                    operation: "Reset list after search",
                    time: dateObj2.getTime() - dateObj1.getTime()
                });
            }
            searched = true;
            showShare();
        }
    }

    /* FuzzySEARCH */
    function searchFuzzyList(event) {
        var dateObj1,
            dateObj2,
            searchString = $(this).val(),
            key = event.which;

        /* Only search when press 'enter', otherwise the time table
        is flooded */
        if (key == 13) {
            /* SEARCH LIST PERFORMANCE */
            dateObj1 = new Date();
            theList.search(searchString);
            dateObj2 = new Date();

            if (searchString != "") {
                timeTable.add({
                    operation: "Fuzzy search for "+searchString,
                    time: dateObj2.getTime() - dateObj1.getTime()
                });
            } else {
                timeTable.add({
                    operation: "Reset list after fuzzy search",
                    time: dateObj2.getTime() - dateObj1.getTime()
                });
            }
            searched = true;
            showShare();
        }
    }

    /* SORTING */
    function sortColumn(column) {
        var dateObj1,
            dateObj2;

        /* CREATE LIST PERFORMANCE */
        dateObj1 = new Date();
        theList.sort(column);
        dateObj2 = new Date();

        timeTable.add({
            operation: "Sort column: "+column,
            time: dateObj2.getTime() - dateObj1.getTime()
        });

        sorted = true;
        showShare();
    }

    function addItems() {
        var dateObj1,
            dateObj2,
            numberOfItems = $('#add-items-count').val();

        /* Only search when press 'enter', otherwise the time table
        is flooded */
        if (!isNaN(numberOfItems)) {
            numberOfItems = Math.abs(numberOfItems);
            var items = [];

            for (var i = 0; i < numberOfItems; i++) {
                var item = {};
                for (var j = 0; j < columnCount; j++) {
                    item['column'+j] = randomString(13);
                }
                items.push(item);
            }

            /* ADD ITEMS TO LIST PERFORMANCE */
            dateObj1 = new Date();
            theList.add(items);
            dateObj2 = new Date();

            timeTable.add({
                operation: "Added "+numberOfItems+" items",
                time: dateObj2.getTime() - dateObj1.getTime()
            });
            $('#list-size-val').text(theList.size());
        }

    }

    function showShare() {
        if (sorted && searched) {
            setTimeout(function() {
                $('#performance-share').slideDown();
            }, 3000);
        }
    }

    /* SORT */
</script>
<script type="text/javascript" src="http://s7.addthis.com/js/250/addthis_widget.js#pubid=javve"></script>